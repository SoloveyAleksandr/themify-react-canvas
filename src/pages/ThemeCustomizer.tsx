import React, { useState } from 'react';
import { useTheme } from '../contexts/ThemeContext';
import { Button, Typography, Card, Input } from '../components';
import { ColorPicker } from '../components/ColorPicker/ColorPicker';
import '../styles/global.scss';

const ThemeCustomizer: React.FC = () => {
  const { theme, updateTheme, resetTheme, toggleMode } = useTheme();
  const [activeTab, setActiveTab] = useState<'colors' | 'typography' | 'spacing'>('colors');

  const colorGroups = [
    {
      title: '–û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞',
      colors: [
        { key: 'primaryColor', label: '–û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç', value: theme.primaryColor },
        { key: 'primaryLight', label: '–û—Å–Ω–æ–≤–Ω–æ–π —Å–≤–µ—Ç–ª—ã–π', value: theme.primaryLight },
        { key: 'primaryDark', label: '–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–º–Ω—ã–π', value: theme.primaryDark },
      ]
    },
    {
      title: '–í—Ç–æ—Ä–∏—á–Ω—ã–µ —Ü–≤–µ—Ç–∞',
      colors: [
        { key: 'secondaryColor', label: '–í—Ç–æ—Ä–∏—á–Ω—ã–π —Ü–≤–µ—Ç', value: theme.secondaryColor },
        { key: 'secondaryLight', label: '–í—Ç–æ—Ä–∏—á–Ω—ã–π —Å–≤–µ—Ç–ª—ã–π', value: theme.secondaryLight },
        { key: 'secondaryDark', label: '–í—Ç–æ—Ä–∏—á–Ω—ã–π —Ç–µ–º–Ω—ã–π', value: theme.secondaryDark },
      ]
    },
    {
      title: '–°—Ç–∞—Ç—É—Å–Ω—ã–µ —Ü–≤–µ—Ç–∞',
      colors: [
        { key: 'successColor', label: '–£—Å–ø–µ—Ö', value: theme.successColor },
        { key: 'warningColor', label: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', value: theme.warningColor },
        { key: 'errorColor', label: '–û—à–∏–±–∫–∞', value: theme.errorColor },
      ]
    },
    {
      title: '–§–æ–Ω –∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏',
      colors: [
        { key: 'backgroundColor', label: '–§–æ–Ω', value: theme.backgroundColor },
        { key: 'surfaceColor', label: '–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å', value: theme.surfaceColor },
        { key: 'surfaceHover', label: '–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏', value: theme.surfaceHover },
      ]
    },
    {
      title: '–¢–µ–∫—Å—Ç',
      colors: [
        { key: 'textPrimary', label: '–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç', value: theme.textPrimary },
        { key: 'textSecondary', label: '–í—Ç–æ—Ä–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç', value: theme.textSecondary },
        { key: 'textDisabled', label: '–û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç', value: theme.textDisabled },
      ]
    },
    {
      title: '–ì—Ä–∞–Ω–∏—Ü—ã',
      colors: [
        { key: 'borderColor', label: '–ì—Ä–∞–Ω–∏—Ü–∞', value: theme.borderColor },
        { key: 'borderFocus', label: '–ì—Ä–∞–Ω–∏—Ü–∞ –≤ —Ñ–æ–∫—É—Å–µ', value: theme.borderFocus },
      ]
    }
  ];

  const handleColorChange = (key: string, value: string) => {
    updateTheme({ [key]: value });
  };

  const handleInputChange = (key: string, value: string) => {
    updateTheme({ [key]: value });
  };

  return (
    <div className="container" style={{ padding: '2rem 0' }}>
      <div style={{ marginBottom: '2rem' }}>
        <Typography variant="h1" align="center">
          –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        </Typography>
        <Typography variant="body1" color="secondary" align="center">
          –ò–∑–º–µ–Ω–∏—Ç–µ —Ü–≤–µ—Ç–∞, —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫—É –∏ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ç–µ–º—ã
        </Typography>
      </div>

      {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è */}
      <div className="flex justify-between items-center" style={{ marginBottom: '2rem' }}>
        <div className="flex gap-md">
          <Button 
            variant={theme.mode === 'light' ? 'primary' : 'secondary'} 
            onClick={toggleMode}
          >
            {theme.mode === 'light' ? 'üåô –¢–µ–º–Ω–∞—è —Ç–µ–º–∞' : '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞'}
          </Button>
        </div>
        <Button variant="ghost" onClick={resetTheme}>
          –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        </Button>
      </div>

      {/* –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –æ–±–ª–∞—Å—Ç—å */}
      <Card spacing="spacious" style={{ marginBottom: '2rem' }}>
        <Typography variant="h3" gutterBottom>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</Typography>
        
        <div className="flex gap-md" style={{ marginBottom: '1rem' }}>
          <Button variant="primary">–û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞</Button>
          <Button variant="secondary">–í—Ç–æ—Ä–∏—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞</Button>
          <Button variant="success">–£—Å–ø–µ—Ö</Button>
          <Button variant="warning">–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</Button>
          <Button variant="error">–û—à–∏–±–∫–∞</Button>
        </div>

        <div style={{ maxWidth: '300px', marginBottom: '1rem' }}>
          <Input 
            label="–ü—Ä–∏–º–µ—Ä –ø–æ–ª—è –≤–≤–æ–¥–∞" 
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç..." 
            helperText="–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç"
          />
        </div>

        <div>
          <Typography variant="h4">–ó–∞–≥–æ–ª–æ–≤–æ–∫ H4</Typography>
          <Typography variant="body1">
            –≠—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø—Ä–∏–º–µ—Ä–æ–º —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã–≥–ª—è–¥—è—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ.
          </Typography>
          <Typography variant="body2" color="secondary">
            –í—Ç–æ—Ä–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.
          </Typography>
        </div>
      </Card>

      {/* –í–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
      <div className="flex gap-sm" style={{ marginBottom: '1rem' }}>
        <Button 
          variant={activeTab === 'colors' ? 'primary' : 'ghost'}
          onClick={() => setActiveTab('colors')}
        >
          –¶–≤–µ—Ç–∞
        </Button>
        <Button 
          variant={activeTab === 'typography' ? 'primary' : 'ghost'}
          onClick={() => setActiveTab('typography')}
        >
          –¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞
        </Button>
        <Button 
          variant={activeTab === 'spacing' ? 'primary' : 'ghost'}
          onClick={() => setActiveTab('spacing')}
        >
          –†–∞–∑–º–µ—Ä—ã
        </Button>
      </div>

      {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫ */}
      {activeTab === 'colors' && (
        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', gap: '1rem' }}>
          {colorGroups.map((group) => (
            <Card key={group.title} spacing="normal">
              <Typography variant="h5" gutterBottom>{group.title}</Typography>
              <div style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>
                {group.colors.map((color) => (
                  <ColorPicker
                    key={color.key}
                    label={color.label}
                    value={color.value}
                    onChange={(value) => handleColorChange(color.key, value)}
                  />
                ))}
              </div>
            </Card>
          ))}
        </div>
      )}

      {activeTab === 'typography' && (
        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', gap: '1rem' }}>
          <Card spacing="normal">
            <Typography variant="h5" gutterBottom>–†–∞–∑–º–µ—Ä—ã —à—Ä–∏—Ñ—Ç–∞</Typography>
            <div style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>
              <Input
                label="–ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞"
                value={theme.fontSize}
                onChange={(e) => handleInputChange('fontSize', e.target.value)}
                placeholder="1rem"
              />
            </div>
          </Card>
          
          <Card spacing="normal">
            <Typography variant="h5" gutterBottom>–í–µ—Å —à—Ä–∏—Ñ—Ç–∞</Typography>
            <div style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>
              <Input
                label="–û–±—ã—á–Ω—ã–π –≤–µ—Å —à—Ä–∏—Ñ—Ç–∞"
                value={theme.fontWeight}
                onChange={(e) => handleInputChange('fontWeight', e.target.value)}
                placeholder="400"
              />
            </div>
          </Card>
        </div>
      )}

      {activeTab === 'spacing' && (
        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', gap: '1rem' }}>
          <Card spacing="normal">
            <Typography variant="h5" gutterBottom>–°–∫—Ä—É–≥–ª–µ–Ω–∏—è</Typography>
            <div style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>
              <Input
                label="–ë–∞–∑–æ–≤–æ–µ —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ"
                value={theme.borderRadius}
                onChange={(e) => handleInputChange('borderRadius', e.target.value)}
                placeholder="0.375rem"
              />
              <Input
                label="–ë–æ–ª—å—à–æ–µ —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ"
                value={theme.borderRadiusLg}
                onChange={(e) => handleInputChange('borderRadiusLg', e.target.value)}
                placeholder="0.5rem"
              />
            </div>
          </Card>
        </div>
      )}
    </div>
  );
};

export default ThemeCustomizer;